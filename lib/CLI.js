// Generated by CoffeeScript 1.9.3
(function() {
  var CLI, async, buildsPath, config, exec, expandHomeDir, fs, fs2, model, path, pm2, reposPath, thisFn, trimFn;

  pm2 = require('pm2');

  fs = require('fs-extra');

  fs2 = require('fs');

  path = require('path');

  exec = require('child_process').exec;

  async = require('async');

  config = require('./config');

  model = require('./model');

  expandHomeDir = require('expand-home-dir');

  reposPath = expandHomeDir(config.REPO_BASE_PATH);

  buildsPath = expandHomeDir(config.BUILD_BASE_PATH);

  trimFn = function(x) {
    return x.trim();
  };

  thisFn = function(x) {
    return x;
  };

  CLI = (function() {
    function CLI() {}

    CLI.prototype.startServer = function(callback) {
      return this.isServerRunning((function(_this) {
        return function(err, isRunning) {
          if (err) {
            return callback(err);
          }
          if (isRunning) {
            return callback(new Error('server is already running'));
          }
          return _this.pm2StartProcess(path.join(__dirname, '../lib/server.js'), 'deploy-server', {
            port: config.PORT_START_NUMBER
          }, function(err) {
            if (err) {
              return callback(err);
            }
            return _this.pm2StartProcess(path.join(__dirname, '../lib/proxy.js'), 'deploy-server-proxy', {
              port: config.PROXY_PORT
            }, callback);
          });
        };
      })(this));
    };

    CLI.prototype.stopServer = function(callback) {
      return this.isServerRunning((function(_this) {
        return function(err, isRunning) {
          if (err) {
            return callback(err);
          }
          if (!isRunning) {
            return callback(new Error('server is not running'));
          }
          return _this.pm2DeleteProcess('deploy-server', function(err) {
            if (err) {
              return callback(err);
            }
            return _this.pm2DeleteProcess('deploy-server-proxy', callback);
          });
        };
      })(this));
    };

    CLI.prototype.kill = function(callback) {
      return this.pm2Run(function(pm2, cb) {
        return pm2.killDaemon(function(err) {
          cb();
          return callback(err);
        });
      });
    };

    CLI.prototype.resurrect = function(callback) {
      return this.pm2Resurrect(callback);
    };

    CLI.prototype.startup = function(callback) {
      return this.pm2Startup(callback);
    };

    CLI.prototype.dump = function(callback) {
      return this.pm2Dump(callback);
    };

    CLI.prototype.createApplication = function(name, callback) {
      return model.createApplication({
        name: name
      }, (function(_this) {
        return function(err, app) {
          if (err) {
            return callback(err);
          }
          return _this._createRepo(app.name, function(err) {
            if (err) {
              return callback(err);
            }
            return callback(null, app);
          });
        };
      })(this));
    };

    CLI.prototype.deleteApplication = function(app, callback) {
      return this.stopApplication(app, (function(_this) {
        return function() {
          return model.deleteApplication(app, function(err, app) {
            if (err) {
              return callback(err);
            }
            return _this._deleteRepo(app.name, function(err) {
              if (err) {
                return callback(err);
              }
              return _this._deleteBuild(app.name, function(err) {
                if (err) {
                  return callback(err);
                }
                return callback();
              });
            });
          });
        };
      })(this));
    };

    CLI.prototype.getApplications = (function(callback) {
      return model.getApplications(callback);
    });

    CLI.prototype.startApplication = (function(nameOrId, callback) {
      return model.getApplication(nameOrId, (function(_this) {
        return function(err, application) {
          var appPath, procfilePath;
          if (err) {
            return callback(err);
          }
          appPath = path.join(buildsPath, application.name);
          procfilePath = path.join(appPath, 'Procfile');
          if (!fs.existsSync(procfilePath)) {
            return callback(new Error('no Procfile found'));
          }
          return fs.readFile(procfilePath, function(err, procfile) {
            var procstring;
            if (err) {
              return callback(err);
            }
            procstring = procfile.toString();
            return _this._startAppWithProcFile(application, procstring, function(err) {
              if (err) {
                return callback(err);
              }
              return _this.pm2Dump(callback);
            });
          });
        };
      })(this));
    });

    CLI.prototype.stopApplication = (function(nameOrId, callback) {
      return model.getApplication(nameOrId, (function(_this) {
        return function(err, application) {
          if (err) {
            return callback(err);
          }
          return _this._stopProcesses(application, function(err) {
            if (err) {
              return callback(err);
            }
            return _this.pm2Dump(callback);
          });
        };
      })(this));
    });

    CLI.prototype._startAppWithProcFile = function(application, procfile, callback) {
      return this._stopProcesses(application, (function(_this) {
        return function(err) {
          var lines;
          lines = procfile.split("\n").map(trimFn).filter(thisFn);
          return async.forEachSeries(lines, function(line, cb) {
            var cmd, filepath, options, procName, processName, ref;
            ref = line.split(':').map(trimFn), procName = ref[0], cmd = ref[1];
            if (cmd.indexOf('node ') === 0) {
              processName = application.name + ': ' + procName;
              filepath = path.join(buildsPath, application.name, cmd.replace('node ', ''));
              options = {};
              if (procName === 'web') {
                return model.portForApplication(application.name, function(err, port) {
                  options.port = port;
                  console.log('starting web process', processName, 'port', port);
                  return _this.pm2StartProcess(filepath, processName, options, cb);
                });
              } else {
                console.log('starting worker process', processName);
                return _this.pm2StartProcess(filepath, processName, options, cb);
              }
            } else {
              return console.error('unsupported command', cmd);
            }
          }, callback);
        };
      })(this));
    };

    CLI.prototype._stopProcesses = function(application, callback) {
      return this.isServerRunning((function(_this) {
        return function(err, isRunning) {
          if (err) {
            return callback(err);
          }
          if (!isRunning) {
            return callback(new Error('server is not running'));
          }
          return _this._getPM2Apps(function(err, apps) {
            if (err) {
              return callback(err);
            }
            return async.forEachSeries(apps, function(app, cb) {
              if (app.name.indexOf(application.name) === 0) {
                console.log('stopping', app.name);
                return _this.pm2DeleteProcess(app.pm_id, cb);
              } else {
                return cb();
              }
            }, callback);
          });
        };
      })(this));
    };

    CLI.prototype._getPM2Apps = function(callback) {
      return this.pm2Run(function(pm2, cb) {
        return pm2.list(function(err, apps) {
          return cb(function(err) {
            return callback(err, apps);
          });
        });
      });
    };

    CLI.prototype.isServerRunning = function(callback) {
      return this._getPM2Apps(function(err, apps) {
        var app, i, len;
        if (err) {
          return callback(err);
        }
        for (i = 0, len = apps.length; i < len; i++) {
          app = apps[i];
          if (app.name === 'deploy-server') {
            return callback(null, true);
          }
        }
        return callback(false);
      });
    };

    CLI.prototype._createRepo = function(name, callback) {
      var repoPath;
      repoPath = path.join(reposPath, name + '.git');
      return fs.ensureDir(repoPath, (function(_this) {
        return function(err) {
          if (err) {
            return callback(err);
          }
          return exec('git init --bare', {
            cwd: repoPath
          }, function(err, stdout, stderr) {
            if (err) {
              return callback(err);
            }
            return _this._deployCmd(function(err, cmd) {
              var content;
              if (err) {
                return callback(err);
              }
              content = fs.readFileSync(path.join(__dirname, '../bin/post-receive.sh')).toString().replace('{BUILD_PATH}', path.join(expandHomeDir(config.BUILD_BASE_PATH), name)).replace('{REPO_PATH}', repoPath).replace('{DEPLOY_CMD}', cmd);
              fs.writeFileSync(path.join(repoPath, 'hooks/post-receive'), content);
              return exec('chmod +x hooks/post-receive', {
                cwd: repoPath
              }, function(err, stdout, stderr) {
                return callback();
              });
            });
          });
        };
      })(this));
    };

    CLI.prototype._deleteRepo = function(name, callback) {
      var repoPath;
      repoPath = path.join(reposPath, name + '.git');
      return fs.remove(repoPath, callback);
    };

    CLI.prototype._deleteBuild = function(name, callback) {
      var buildPath;
      buildPath = path.join(buildsPath, name);
      return fs.remove(buildPath, callback);
    };

    CLI.prototype._deployCmd = function(callback) {
      return exec('which deploy', function(err, stdout, stderr) {
        if (stdout) {
          return callback(null, stdout);
        }
        return callback(null, path.join(__dirname, '../bin/deploy.js'));
      });
    };

    CLI.prototype.getDomainsForApplication = function(appNameOrID, callback) {
      return model.getApplication(appNameOrID, (function(_this) {
        return function(err, application) {
          if (err) {
            return callback(err);
          }
          return application.getDomains({
            raw: true
          }).then(function(domains) {
            return callback(null, domains);
          })["catch"](callback);
        };
      })(this));
    };

    CLI.prototype.addDomainToApplication = function(appNameOrID, domain, callback) {
      return model.addDomainToApplication(appNameOrID, domain, callback);
    };

    CLI.prototype.removeDomainFromApplication = function(appNameOrID, domain, callback) {
      return model.removeDomainFromApplication(appNameOrID, domain, callback);
    };

    CLI.prototype.getUsers = function(callback) {
      return model.getUsers(callback);
    };

    CLI.prototype.addUser = function(username, password, callback) {
      return model.addUser(username, password, callback);
    };

    CLI.prototype.removeUser = function(username, callback) {
      return model.removeUser(username, callback);
    };

    CLI.prototype.getProcesses = function(callback) {
      return this.pm2Run(function(pm2, cb) {
        return pm2.list(function(err, processes) {
          cb();
          return callback(err, processes);
        });
      });
    };

    CLI.prototype.pm2Run = function(fn) {
      return pm2.connect(function() {
        return fn(pm2, function(cb) {
          return pm2.disconnect(cb);
        });
      });
    };

    CLI.prototype.pm2StartProcess = function(file, name, options, callback) {
      options = options || {};
      options.name = name;
      return this.pm2Run(function(pm2, cb) {
        return pm2.start(file, options, function(err, app) {
          cb();
          return callback(err);
        });
      });
    };

    CLI.prototype.pm2DeleteProcess = function(name, callback) {
      return this.pm2Run(function(pm2, cb) {
        return pm2["delete"](name, function(err) {
          cb();
          return callback(err);
        });
      });
    };

    CLI.prototype.pm2Startup = function(callback) {
      return callback(new Error("please run following commands to create startup script \nsudo PM2_home=\"" + process.env.PM2_HOME + "\" pm2 startup;\nsudo chown " + process.env.USER + ' ' + path.join(process.env.PM2_HOME, 'dump.pm2') + ';'));
    };

    CLI.prototype.pm2Dump = function(callback) {
      return this.pm2Run(function(pm2, cb) {
        return pm2.dump(function(err) {
          cb();
          return callback(err);
        });
      });
    };

    CLI.prototype.pm2Resurrect = function(callback) {
      return this.pm2Run(function(pm2, cb) {
        return pm2.resurrect(function(err) {
          cb();
          return callback(err);
        });
      });
    };

    return CLI;

  })();

  module.exports = new CLI();

}).call(this);
